services:

  nginx:
    container_name: nginx
    image: nginx:0.1
    build:
      context: ./services/nginx/
    ports:
      - "443:443"
      - "80:80"
    restart: unless-stopped
    volumes:
      - static-files:/var/www/django-files/static
    depends_on:
      - django
    networks:
      - transcendence-network

  django:
    container_name: django
    image: django:0.1
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - INTRA_OAUTH_CLIENT_ID=${INTRA_OAUTH_CLIENT_ID}
      - INTRA_OAUTH_SECRET=${INTRA_OAUTH_SECRET}
    build:
      context: ./services/django
    ports:
      - "8000:8000"
    volumes:
      - ./services/django/srcs/:/app
      - static-files:/app/transcendence/staticfiles
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - transcendence-network
    stdin_open: true
    tty: true

  postgres:
    container_name: postgres
    image: postgres:0.1
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    build:
      context: ./services/postgres
    volumes:
      - postgres-volume:/var/lib/postgresql/data/
    restart: unless-stopped
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 3

  redis:
    container_name: redis
    image: "redis:7"
    volumes:
      - redis-volume:/data
    networks:
      - transcendence-network

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: "elasticsearch:8.13.3"
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   networks:
  #     - transcendence-network

  # logstash:
  #   container_name: logstash
  #   image: "logstash:8.13.3"
  #   networks:
  #     - transcendence-network

  # kibana:
  #   container_name: kibana
  #   image: "kibana:8.13.3"
  #   networks:
  #     - transcendence-network

networks:
  transcendence-network:
    name: transcendence-network

volumes:
  # django-volume:
  #   name: django-volume
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ./volumes/django/
  #     o: bind

  static-files:
  postgres-volume:
  redis-volume: